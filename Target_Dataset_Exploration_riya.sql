-- Basic Problems
--  1. List all unique cities where customers are located.
select distinct(customer_city) from customers;

-- 2. Count the number of orders placed in 2017.
select count(order_id) from orders where year(order_purchase_timestamp)=2017;

--  3. Find the total sales per category.
SELECT products.product_category_name AS category,
       ROUND(SUM(payments.payment_value), 2) AS sales
FROM products
JOIN order_items ON products.product_id = order_items.product_id
JOIN payments ON payments.order_id = order_items.order_id
GROUP BY category;

--  4. Calculate the percentage of orders that were paid in installments.
SELECT (SUM(CASE WHEN payment_installments >= 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100 
FROM payments;

-- 5. Count the number of customers from each state. 
SELECT customer_state, COUNT(customer_id) AS customer_count
FROM customers 
GROUP BY customer_state;


-- Intermediate problems
--  1. Calculate the number of orders per month in 2018.
SELECT monthname(order_purchase_timestamp) AS months, 
       COUNT(order_id) AS order_count
FROM orders 
WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY months;

--  2. Find the average number of products per order, grouped by customer city.
WITH count_per_order AS (
    SELECT orders.order_id, orders.customer_id, COUNT(order_items.order_id) AS oc
    FROM orders
    JOIN order_items ON orders.order_id = order_items.order_id
    GROUP BY orders.order_id, orders.customer_id
)
SELECT customers.customer_city, ROUND(AVG(count_per_order.oc), 2) AS average_orders
FROM customers
JOIN count_per_order ON customers.customer_id = count_per_order.customer_id
GROUP BY customers.customer_city
ORDER BY average_orders DESC;

-- 3. Calculate the percentage of total revenue contributed by each product category.
SELECT 
    products.product_category_name AS category,
    round((SUM(payments.payment_value) / 
        (SELECT SUM(payment_value) FROM payments) * 100), 2) AS sales_percentage
FROM 
    products 
JOIN 
    order_items ON products.product_id = order_items.product_id
JOIN 
    payments ON payments.order_id = order_items.order_id
GROUP BY 
    products.product_category_name 
ORDER BY 
    sales_percentage DESC;
    
    
-- 4. Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category,
count(order_items.product_id),
round(avg(order_items.price),2)
from products join order_items
on products.product_id = order_items.product_id
group by products.product_category;

-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.
SELECT *, dense_rank() OVER(ORDER BY revenue DESC) AS rn FROM (
    SELECT order_items.seller_id, 
           SUM(payments.payment_value) / 1e6 AS revenue  -- Convert to millions (M)
    FROM order_items 
    JOIN payments ON order_items.order_id = payments.order_id
    GROUP BY order_items.seller_id
) AS a;




-- Advanced problems
-- 1. Calculate the moving average of order values for each customer over their order history.
WITH CustomerOrders AS (
    SELECT
        o.customer_id,
        o.order_purchase_timestamp,
        p.payment_value AS payment
    FROM
        orders o
    JOIN
        payments p ON o.order_id = p.order_id
)
SELECT
    customer_id,
    order_purchase_timestamp,
    payment,
    AVG(payment) OVER (
        PARTITION BY customer_id
        ORDER BY order_purchase_timestamp
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS moving_avg
FROM
    CustomerOrders;

-- 2. Calculate the cumulative sales per month for each year.
select years, months, payment, sum(payment)
over(order by years, months) cummulative_sales from
 (select year(orders.order_purchase_timestamp) as years,
month(orders.order_purchase_timestamp) as months,
round(sum(payments.payment_value),2) as payment from orders join payments
on orders.order_id = payments.order_id 
group by years, months order by years, months) as a;

--  3. Calculate the year-over-year growth rate of total sales.
with a as(
select year(orders.order_purchase_timestamp) as years,
round(sum(payments.payment_value),2) as payment from orders join payments
on orders.order_id = payments.order_id 
group by years order by years)
select years, ((payment - lag(payment - 1) over(order by years))/lag(payment, 1) over(order by years)) * 100   from a;

-- 4. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
WITH a AS (
    SELECT customers.customer_id,
           MIN(orders.order_purchase_timestamp) AS first_order
    FROM customers 
    JOIN orders ON customers.customer_id = orders.customer_id
    GROUP BY customers.customer_id
), 
b AS (
    SELECT a.customer_id, 
           COUNT(DISTINCT orders.order_purchase_timestamp) AS next_order
    FROM a 
    JOIN orders ON orders.customer_id = a.customer_id
               AND orders.order_purchase_timestamp > a.first_order
               AND orders.order_purchase_timestamp < DATE_ADD(a.first_order, INTERVAL 6 MONTH)
    GROUP BY a.customer_id
)
SELECT 
    100 * (COUNT(DISTINCT b.customer_id) / COUNT(DISTINCT a.customer_id)) AS repeat_purchase_rate
FROM a 
LEFT JOIN b ON a.customer_id = b.customer_id;

-- 5. Identify the top 3 customers who spent the most money in each year.
SELECT years, customer_id, payment, d_rank
FROM (
    SELECT 
        YEAR(orders.order_purchase_timestamp) AS years,
        orders.customer_id,
        SUM(payments.payment_value) AS payment,
        DENSE_RANK() OVER(PARTITION BY YEAR(orders.order_purchase_timestamp) 
                          ORDER BY SUM(payments.payment_value) DESC) AS d_rank
    FROM orders 
    JOIN payments ON payments.order_id = orders.order_id
    GROUP BY YEAR(orders.order_purchase_timestamp), orders.customer_id
) AS a 
WHERE d_rank <= 3;

    










